{
  "additionalProperties": false,
  "description": "Modifies the orginal Settings class provided by the user",
  "properties": {
    "log_level": {
      "default": "INFO",
      "description": "The minimum log level to capture.",
      "enum": [
        "CRITICAL",
        "ERROR",
        "WARNING",
        "INFO",
        "DEBUG",
        "TRACE"
      ],
      "title": "Log Level",
      "type": "string"
    },
    "service_name": {
      "default": "fis",
      "title": "Service Name",
      "type": "string"
    },
    "service_instance_id": {
      "description": "A string that uniquely identifies this instance across all instances of this service. A globally unique Kafka client ID will be created by concatenating the service_name and the service_instance_id.",
      "examples": [
        "germany-bw-instance-001"
      ],
      "title": "Service Instance Id",
      "type": "string"
    },
    "log_format": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "If set, will replace JSON formatting with the specified string format. If not set, has no effect. In addition to the standard attributes, the following can also be specified: timestamp, service, instance, level, correlation_id, and details",
      "examples": [
        "%(timestamp)s - %(service)s - %(level)s - %(message)s",
        "%(asctime)s - Severity: %(levelno)s - %(msg)s"
      ],
      "title": "Log Format"
    },
    "vault_url": {
      "description": "URL of the vault instance to connect to",
      "examples": [
        "http://127.0.0.1.8200"
      ],
      "title": "Vault Url",
      "type": "string"
    },
    "vault_role_id": {
      "anyOf": [
        {
          "format": "password",
          "type": "string",
          "writeOnly": true
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Vault role ID to access a specific prefix",
      "examples": [
        "example_role"
      ],
      "title": "Vault Role Id"
    },
    "vault_secret_id": {
      "anyOf": [
        {
          "format": "password",
          "type": "string",
          "writeOnly": true
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Vault secret ID to access a specific prefix",
      "examples": [
        "example_secret"
      ],
      "title": "Vault Secret Id"
    },
    "vault_verify": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "default": true,
      "description": "SSL certificates (CA bundle) used to verify the identity of the vault, or True to use the default CAs, or False for no verification.",
      "examples": [
        "/etc/ssl/certs/my_bundle.pem"
      ],
      "title": "Vault Verify"
    },
    "vault_path": {
      "description": "Path without leading or trailing slashes where secrets should be stored in the vault.",
      "title": "Vault Path",
      "type": "string"
    },
    "vault_secrets_mount_point": {
      "default": "secret",
      "description": "Name used to address the secret engine under a custom mount path.",
      "examples": [
        "secret"
      ],
      "title": "Vault Secrets Mount Point",
      "type": "string"
    },
    "vault_kube_role": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Vault role name used for Kubernetes authentication",
      "examples": [
        "file-ingest-role"
      ],
      "title": "Vault Kube Role"
    },
    "service_account_token_path": {
      "default": "/var/run/secrets/kubernetes.io/serviceaccount/token",
      "description": "Path to service account token used by kube auth adapter.",
      "format": "path",
      "title": "Service Account Token Path",
      "type": "string"
    },
    "private_key": {
      "description": "Base64 encoded private key of the keypair whose public key is used to encrypt the payload.",
      "title": "Private Key",
      "type": "string"
    },
    "source_bucket_id": {
      "description": "ID of the bucket the object(s) corresponding to the upload metadata have been uploaded to. This should currently point to the staging bucket.",
      "title": "Source Bucket Id",
      "type": "string"
    },
    "token_hashes": {
      "description": "List of token hashes corresponding to the tokens that can be used to authenticate calls to this service.",
      "items": {
        "type": "string"
      },
      "title": "Token Hashes",
      "type": "array"
    },
    "selected_storage_alias": {
      "description": "S3 endpoint alias of the object storage node the bucket and object(s) corresponding to the upload metadata have been uploaded to. This should point to a node containing a staging bucket.",
      "title": "Selected Storage Alias",
      "type": "string"
    },
    "kafka_servers": {
      "description": "A list of connection strings to connect to Kafka bootstrap servers.",
      "examples": [
        [
          "localhost:9092"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Kafka Servers",
      "type": "array"
    },
    "kafka_security_protocol": {
      "default": "PLAINTEXT",
      "description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL.",
      "enum": [
        "PLAINTEXT",
        "SSL"
      ],
      "title": "Kafka Security Protocol",
      "type": "string"
    },
    "kafka_ssl_cafile": {
      "default": "",
      "description": "Certificate Authority file path containing certificates used to sign broker certificates. If a CA is not specified, the default system CA will be used if found by OpenSSL.",
      "title": "Kafka Ssl Cafile",
      "type": "string"
    },
    "kafka_ssl_certfile": {
      "default": "",
      "description": "Optional filename of client certificate, as well as any CA certificates needed to establish the certificate's authenticity.",
      "title": "Kafka Ssl Certfile",
      "type": "string"
    },
    "kafka_ssl_keyfile": {
      "default": "",
      "description": "Optional filename containing the client private key.",
      "title": "Kafka Ssl Keyfile",
      "type": "string"
    },
    "kafka_ssl_password": {
      "default": "",
      "description": "Optional password to be used for the client private key.",
      "format": "password",
      "title": "Kafka Ssl Password",
      "type": "string",
      "writeOnly": true
    },
    "generate_correlation_id": {
      "default": true,
      "description": "A flag, which, if False, will result in an error when inbound requests don't possess a correlation ID. If True, requests without a correlation ID will be assigned a newly generated ID in the correlation ID middleware function.",
      "examples": [
        true,
        false
      ],
      "title": "Generate Correlation Id",
      "type": "boolean"
    },
    "publisher_topic": {
      "description": "Topic name expected by downstream services. Use the topic name from the interrogation room service.",
      "examples": [
        "file_interrogation"
      ],
      "title": "Publisher Topic",
      "type": "string"
    },
    "publisher_type": {
      "description": "Type expected by downstream services. Use the type from the interrogation room service.",
      "examples": [
        "file_validation_success"
      ],
      "title": "Publisher Type",
      "type": "string"
    },
    "host": {
      "default": "127.0.0.1",
      "description": "IP of the host.",
      "title": "Host",
      "type": "string"
    },
    "port": {
      "default": 8080,
      "description": "Port to expose the server on the specified host",
      "title": "Port",
      "type": "integer"
    },
    "auto_reload": {
      "default": false,
      "description": "A development feature. Set to `True` to automatically reload the server upon code changes",
      "title": "Auto Reload",
      "type": "boolean"
    },
    "workers": {
      "default": 1,
      "description": "Number of workers processes to run.",
      "title": "Workers",
      "type": "integer"
    },
    "api_root_path": {
      "default": "",
      "description": "Root path at which the API is reachable. This is relative to the specified host and port.",
      "title": "Api Root Path",
      "type": "string"
    },
    "openapi_url": {
      "default": "/openapi.json",
      "description": "Path to get the openapi specification in JSON format. This is relative to the specified host and port.",
      "title": "Openapi Url",
      "type": "string"
    },
    "docs_url": {
      "default": "/docs",
      "description": "Path to host the swagger documentation. This is relative to the specified host and port.",
      "title": "Docs Url",
      "type": "string"
    },
    "cors_allowed_origins": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "A list of origins that should be permitted to make cross-origin requests. By default, cross-origin requests are not allowed. You can use ['*'] to allow any origin.",
      "examples": [
        [
          "https://example.org",
          "https://www.example.org"
        ]
      ],
      "title": "Cors Allowed Origins"
    },
    "cors_allow_credentials": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Indicate that cookies should be supported for cross-origin requests. Defaults to False. Also, cors_allowed_origins cannot be set to ['*'] for credentials to be allowed. The origins must be explicitly specified.",
      "examples": [
        [
          "https://example.org",
          "https://www.example.org"
        ]
      ],
      "title": "Cors Allow Credentials"
    },
    "cors_allowed_methods": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "A list of HTTP methods that should be allowed for cross-origin requests. Defaults to ['GET']. You can use ['*'] to allow all standard methods.",
      "examples": [
        [
          "*"
        ]
      ],
      "title": "Cors Allowed Methods"
    },
    "cors_allowed_headers": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "A list of HTTP request headers that should be supported for cross-origin requests. Defaults to []. You can use ['*'] to allow all headers. The Accept, Accept-Language, Content-Language and Content-Type headers are always allowed for CORS requests.",
      "examples": [
        []
      ],
      "title": "Cors Allowed Headers"
    }
  },
  "required": [
    "service_instance_id",
    "vault_url",
    "vault_path",
    "private_key",
    "source_bucket_id",
    "token_hashes",
    "selected_storage_alias",
    "kafka_servers",
    "publisher_topic",
    "publisher_type"
  ],
  "title": "ModSettings",
  "type": "object"
}