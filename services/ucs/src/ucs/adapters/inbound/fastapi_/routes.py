# Copyright 2021 - 2025 Universität Tübingen, DKFZ, EMBL, and Universität zu Köln
# for the German Human Genome-Phenome Archive (GHGA)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Module containing the main FastAPI router and all route functions."""

import logging
from typing import Annotated

from fastapi import APIRouter, status
from pydantic import UUID4

from ucs.adapters.inbound.fastapi_ import (
    dummies,
    http_authorization,
    http_exceptions,
    rest_models,
)
from ucs.ports.inbound.controller import UploadControllerPort

router = APIRouter(tags=["UploadControllerService"])

log = logging.getLogger(__name__)

ERROR_RESPONSES = {
    "noSuchStorage": {
        "description": (
            "Exceptions by ID:"
            + "\n- noSuchStorage: The storage node for the given alias does not exist."
        ),
        "model": http_exceptions.HttpUnknownStorageAliasError.get_body_model(),
    },
    "boxAlreadyExists": {
        "description": (
            "Exceptions by ID:"
            + "\n- boxAlreadyExists: A FileUploadBox with the given ID already exists."
        ),
        "model": http_exceptions.HttpBoxAlreadyExistsError.get_body_model(),
    },
    "boxNotFound": {
        "description": (
            "Exceptions by ID:"
            + "\n- boxNotFound: The FileUploadBox with the given ID does not exist."
        ),
        "model": http_exceptions.HttpBoxNotFoundError.get_body_model(),
    },
    "lockedBox": {
        "description": (
            "Exceptions by ID:"
            + "\n- lockedBox: The FileUploadBox is locked and cannot be modified."
        ),
        "model": http_exceptions.HttpLockedBoxError.get_body_model(),
    },
    "fileUploadAlreadyExists": {
        "description": (
            "Exceptions by ID:"
            + "\n- fileUploadAlreadyExists: A FileUpload with the given alias already exists in this box."
        ),
        "model": http_exceptions.HttpFileUploadAlreadyExistsError.get_body_model(),
    },
    "multipartUploadInProgress": {
        "description": (
            "Exceptions by ID:"
            + "\n- multipartUploadInProgress: A multipart upload is already in progress for this file."
        ),
        "model": http_exceptions.HttpMultipartUploadInProgressError.get_body_model(),
    },
    "s3UploadDetailsNotFound": {
        "description": (
            "Exceptions by ID:"
            + "\n- s3UploadDetailsNotFound: S3 upload details for the file could not be found."
        ),
        "model": http_exceptions.HttpS3UploadDetailsNotFoundError.get_body_model(),
    },
    "s3UploadNotFound": {
        "description": (
            "Exceptions by ID:"
            + "\n- s3UploadNotFound: The S3 multipart upload could not be found."
        ),
        "model": http_exceptions.HttpS3UploadNotFoundError.get_body_model(),
    },
    "fileUploadNotFound": {
        "description": (
            "Exceptions by ID:"
            + "\n- fileUploadNotFound: The FileUpload could not be found."
        ),
        "model": http_exceptions.HttpFileUploadNotFoundError.get_body_model(),
    },
    "s3UploadCompletionFailure": {
        "description": (
            "Exceptions by ID:"
            + "\n- s3UploadCompletionFailure: There was an error completing the s3"
            + " multipart upload."
        ),
        "model": http_exceptions.HttpUploadCompletionError.get_body_model(),
    },
    "uploadAbortError": {
        "description": (
            "Exceptions by ID:"
            + "\n- uploadAbortError: There was an error aborting the s3"
            + " multipart upload."
        ),
        "model": http_exceptions.HttpUploadAbortError.get_body_model(),
    },
}


@router.get(
    "/health",
    summary="health",
    status_code=status.HTTP_200_OK,
)
async def health():
    """Used to test if this service is alive"""
    return {"status": "OK"}


@router.post(
    "/boxes",
    summary="Create a new FileUploadBox",
    operation_id="createBox",
    status_code=status.HTTP_201_CREATED,
    response_model=UUID4,
    response_description="The box_id of the newly created FileUploadBox",
    responses={
        status.HTTP_409_CONFLICT: ERROR_RESPONSES["boxAlreadyExists"],
        status.HTTP_404_NOT_FOUND: ERROR_RESPONSES["noSuchStorage"],
    },
)
async def create_box(
    box_creation: rest_models.BoxCreationRequest,
    work_order_context: Annotated[
        rest_models.CreateFileBoxWorkOrder,
        http_authorization.require_create_file_box_work_order,
    ],
    upload_controller: dummies.UploadControllerDummy,
) -> UUID4:
    """Create a new FileUploadBox.

    Requires CreateUploadWorkOrder token and only allowed for Data Stewards via the UOS.
    Request body should contain the ID of the corresponding ResearchDataUploadBox.
    Returns the box_id of the newly created FileUploadBox.
    """
    # Use the ResearchDataUploadBox ID as the FileUploadBox ID
    box_id = box_creation.box_id
    if work_order_context.work_type != rest_models.WorkType.CREATE:
        raise http_exceptions.HttpNotAuthorizedError()

    try:
        await upload_controller.create_file_upload_box(
            box_id=box_id, storage_alias=box_creation.storage_alias
        )
    except UploadControllerPort.BoxAlreadyExistsError as error:
        raise http_exceptions.HttpBoxAlreadyExistsError(box_id=box_id) from error
    except UploadControllerPort.UnknownStorageAliasError as error:
        raise http_exceptions.HttpUnknownStorageAliasError() from error
    except Exception as error:
        log.error(error, exc_info=True)
        raise http_exceptions.HttpInternalError() from error

    return box_id


@router.patch(
    "/boxes/{box_id}",
    summary="Update a FileUploadBox (lock/unlock)",
    operation_id="updateBox",
    status_code=status.HTTP_204_NO_CONTENT,
    response_description="FileUploadBox successfully updated",
    responses={
        status.HTTP_404_NOT_FOUND: ERROR_RESPONSES["boxNotFound"],
    },
)
async def update_box(
    box_id: UUID4,
    box_update: rest_models.BoxUpdateRequest,
    work_order_context: Annotated[
        rest_models.ChangeFileBoxWorkOrder,
        http_authorization.require_change_file_box_work_order,
    ],
    upload_controller: dummies.UploadControllerDummy,
) -> None:
    """Update a FileUploadBox to lock or unlock it.

    Request body must indicate whether the box is meant to be locked or unlocked.
    """
    required_work_type = (
        rest_models.WorkType.LOCK if box_update.locked else rest_models.WorkType.UNLOCK
    )
    if (
        work_order_context.box_id != box_id
        or work_order_context.work_type != required_work_type
    ):
        raise http_exceptions.HttpNotAuthorizedError()

    try:
        if box_update.locked:
            await upload_controller.lock_file_upload_box(box_id=box_id)
        else:
            await upload_controller.unlock_file_upload_box(box_id=box_id)
    except UploadControllerPort.BoxNotFoundError as error:
        raise http_exceptions.HttpBoxNotFoundError(box_id=box_id) from error
    except Exception as error:
        log.error(error, exc_info=True)
        raise http_exceptions.HttpInternalError() from error


@router.get(
    "/boxes/{box_id}/uploads",
    summary="Retrieve list of file IDs for box",
    operation_id="getBoxUploads",
    status_code=status.HTTP_200_OK,
    response_model=rest_models.BoxUploadsResponse,
    response_description="List of file IDs for completed uploads in the box",
    responses={
        status.HTTP_404_NOT_FOUND: ERROR_RESPONSES["boxNotFound"],
    },
)
async def get_box_uploads(
    box_id: UUID4,
    work_order_context: Annotated[
        rest_models.ViewFileBoxWorkOrder,
        http_authorization.require_view_file_box_work_order,
    ],
    upload_controller: dummies.UploadControllerDummy,
):
    """Retrieve list of file IDs for a FileUploadBox.

    Returns the list of file IDs for completed uploads in the specified box.
    """
    if (
        work_order_context.box_id != box_id
        or work_order_context.work_type != rest_models.WorkType.VIEW
    ):
        raise http_exceptions.HttpNotAuthorizedError()

    try:
        file_ids = await upload_controller.get_file_ids_for_box(box_id=box_id)
    except UploadControllerPort.BoxNotFoundError as error:
        raise http_exceptions.HttpBoxNotFoundError(box_id=box_id) from error
    except Exception as error:
        log.error(error, exc_info=True)
        raise http_exceptions.HttpInternalError() from error

    return rest_models.BoxUploadsResponse(file_ids=file_ids)


@router.post(
    "/boxes/{box_id}/uploads",
    summary="Add a new FileUpload to an existing FileUploadBox",
    operation_id="createFileUpload",
    status_code=status.HTTP_201_CREATED,
    response_model=UUID4,
    response_description="The file_id of the newly created FileUpload",
    responses={
        status.HTTP_400_BAD_REQUEST: ERROR_RESPONSES["noSuchStorage"],
        status.HTTP_404_NOT_FOUND: ERROR_RESPONSES["boxNotFound"],
        status.HTTP_409_CONFLICT: ERROR_RESPONSES["lockedBox"]
        | ERROR_RESPONSES["fileUploadAlreadyExists"]
        | ERROR_RESPONSES["multipartUploadInProgress"],
    },
)
async def create_file_upload(
    box_id: UUID4,
    file_upload_creation: rest_models.FileUploadCreationRequest,
    work_order_context: Annotated[
        rest_models.CreateFileWorkOrder,
        http_authorization.require_create_file_work_order,
    ],
    upload_controller: dummies.UploadControllerDummy,
) -> UUID4:
    """Add a new FileUpload to an existing FileUploadBox.

    Creates a new file upload within the specified box with the provided alias, checksum, and size.
    Initiates a multipart upload and returns the file ID for the newly created upload.
    """
    file_alias = file_upload_creation.alias
    if (
        work_order_context.box_id != box_id
        or work_order_context.alias != file_alias
        or work_order_context.work_type != rest_models.WorkType.CREATE
    ):
        raise http_exceptions.HttpNotAuthorizedError()

    try:
        file_id = await upload_controller.initiate_file_upload(
            box_id=box_id,
            alias=file_alias,
            checksum=file_upload_creation.checksum,
            size=file_upload_creation.size,
        )
    except UploadControllerPort.BoxNotFoundError as error:
        raise http_exceptions.HttpBoxNotFoundError(box_id=box_id) from error
    except UploadControllerPort.LockedBoxError as error:
        raise http_exceptions.HttpLockedBoxError(box_id=box_id) from error
    except UploadControllerPort.FileUploadAlreadyExists as error:
        raise http_exceptions.HttpFileUploadAlreadyExistsError(
            alias=file_alias
        ) from error
    except UploadControllerPort.UnknownStorageAliasError as error:
        # This should not happen in normal operation since the box was already created
        # with a valid storage alias, but handle it just in case
        raise http_exceptions.HttpUnknownStorageAliasError() from error
    except UploadControllerPort.MultipartUploadInProgressError as error:
        raise http_exceptions.HttpMultipartUploadInProgressError(
            file_alias=file_alias
        ) from error
    except Exception as error:
        log.error(error, exc_info=True)
        raise http_exceptions.HttpInternalError() from error

    return file_id


@router.get(
    "/boxes/{box_id}/uploads/{file_id}/parts/{part_no}",
    summary="Get pre-signed S3 upload URL for file part",
    operation_id="getPartUploadUrl",
    status_code=status.HTTP_200_OK,
    response_model=str,
    response_description="The pre-signed URL for uploading the file part",
    responses={
        status.HTTP_400_BAD_REQUEST: ERROR_RESPONSES["noSuchStorage"],
        status.HTTP_404_NOT_FOUND: ERROR_RESPONSES["s3UploadDetailsNotFound"]
        | ERROR_RESPONSES["s3UploadNotFound"],
    },
)
async def get_part_upload_url(
    box_id: UUID4,
    file_id: UUID4,
    part_no: int,
    work_order_context: Annotated[
        rest_models.UploadFileWorkOrder,
        http_authorization.require_upload_file_work_order,
    ],
    upload_controller: dummies.UploadControllerDummy,
) -> str:
    """Get pre-signed S3 upload URL for a specific file part.

    Returns a pre-signed URL that can be used to upload the bytes for the specified
    part number of the specified file upload.
    """
    if (
        work_order_context.box_id != box_id
        or work_order_context.file_id != file_id
        or work_order_context.work_type != rest_models.WorkType.UPLOAD
    ):
        raise http_exceptions.HttpNotAuthorizedError()

    try:
        presigned_url = await upload_controller.get_part_upload_url(
            file_id=file_id, part_no=part_no
        )
    except UploadControllerPort.S3UploadDetailsNotFoundError as error:
        raise http_exceptions.HttpS3UploadDetailsNotFoundError(
            file_id=file_id
        ) from error
    except UploadControllerPort.UnknownStorageAliasError as error:
        raise http_exceptions.HttpUnknownStorageAliasError() from error
    except UploadControllerPort.S3UploadNotFoundError as error:
        raise http_exceptions.HttpS3UploadNotFoundError() from error
    except Exception as error:
        log.error(error, exc_info=True)
        raise http_exceptions.HttpInternalError() from error

    return presigned_url


@router.patch(
    "/boxes/{box_id}/uploads/{file_id}",
    summary="Complete file upload",
    operation_id="completeFileUpload",
    status_code=status.HTTP_204_NO_CONTENT,
    response_description="File upload completed successfully",
    responses={
        status.HTTP_404_NOT_FOUND: ERROR_RESPONSES["boxNotFound"]
        | ERROR_RESPONSES["s3UploadDetailsNotFound"]
        | ERROR_RESPONSES["fileUploadNotFound"],
        status.HTTP_409_CONFLICT: ERROR_RESPONSES["lockedBox"],
        status.HTTP_500_INTERNAL_SERVER_ERROR: ERROR_RESPONSES[
            "s3UploadCompletionFailure"
        ],
    },
)
async def complete_file_upload(
    box_id: UUID4,
    file_id: UUID4,
    work_order_context: Annotated[
        rest_models.UploadFileWorkOrder,
        http_authorization.require_upload_file_work_order,
    ],
    upload_controller: dummies.UploadControllerDummy,
) -> None:
    """Complete file upload by instructing S3 to finalize the multipart upload.

    Concludes the file upload process in UCS by instructing S3 to complete the
    multipart upload for the specified file.
    """
    if (
        work_order_context.box_id != box_id
        or work_order_context.file_id != file_id
        or work_order_context.work_type != rest_models.WorkType.CLOSE
    ):
        raise http_exceptions.HttpNotAuthorizedError()

    try:
        await upload_controller.complete_file_upload(box_id=box_id, file_id=file_id)
    except UploadControllerPort.BoxNotFoundError as error:
        raise http_exceptions.HttpBoxNotFoundError(box_id=box_id) from error
    except UploadControllerPort.LockedBoxError as error:
        raise http_exceptions.HttpLockedBoxError(box_id=box_id) from error
    except UploadControllerPort.FileUploadNotFound as error:
        raise http_exceptions.HttpFileUploadNotFoundError(file_id=file_id) from error
    except UploadControllerPort.S3UploadDetailsNotFoundError as error:
        raise http_exceptions.HttpS3UploadDetailsNotFoundError(
            file_id=file_id
        ) from error
    except UploadControllerPort.UploadCompletionError as error:
        raise http_exceptions.HttpUploadCompletionError() from error
    except Exception as error:
        log.error(error, exc_info=True)
        raise http_exceptions.HttpInternalError() from error


@router.delete(
    "/boxes/{box_id}/uploads/{file_id}",
    summary="Remove a FileUpload from the FileUploadBox",
    operation_id="removeFileUpload",
    status_code=status.HTTP_204_NO_CONTENT,
    response_description="FileUpload removed successfully",
    responses={
        status.HTTP_400_BAD_REQUEST: ERROR_RESPONSES["noSuchStorage"],
        status.HTTP_404_NOT_FOUND: ERROR_RESPONSES["boxNotFound"]
        | ERROR_RESPONSES["s3UploadDetailsNotFound"],
        status.HTTP_409_CONFLICT: ERROR_RESPONSES["lockedBox"],
        status.HTTP_500_INTERNAL_SERVER_ERROR: ERROR_RESPONSES["uploadAbortError"],
    },
)
async def remove_file_upload(
    box_id: UUID4,
    file_id: UUID4,
    work_order_context: Annotated[
        rest_models.UploadFileWorkOrder,
        http_authorization.require_upload_file_work_order,
    ],
    upload_controller: dummies.UploadControllerDummy,
) -> None:
    """Remove a FileUpload from the FileUploadBox.

    Deletes the FileUpload and tells S3 to cancel the multipart upload if applicable.
    """
    if (
        work_order_context.box_id != box_id
        or work_order_context.file_id != file_id
        or work_order_context.work_type != rest_models.WorkType.DELETE
    ):
        raise http_exceptions.HttpNotAuthorizedError()

    try:
        await upload_controller.remove_file_upload(box_id=box_id, file_id=file_id)
    except UploadControllerPort.BoxNotFoundError as error:
        raise http_exceptions.HttpBoxNotFoundError(box_id=box_id) from error
    except UploadControllerPort.LockedBoxError as error:
        raise http_exceptions.HttpLockedBoxError(box_id=box_id) from error
    except UploadControllerPort.S3UploadDetailsNotFoundError as error:
        raise http_exceptions.HttpS3UploadDetailsNotFoundError(
            file_id=file_id
        ) from error
    except UploadControllerPort.UnknownStorageAliasError as error:
        raise http_exceptions.HttpUnknownStorageAliasError() from error
    except UploadControllerPort.UploadAbortError as error:
        raise http_exceptions.HttpUploadAbortError() from error
    except Exception as error:
        log.error(error, exc_info=True)
        raise http_exceptions.HttpInternalError() from error
