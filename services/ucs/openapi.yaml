components:
  schemas:
    BoxCreationRequest:
      description: Request body for creating a new FileUploadBox.
      properties:
        research_data_upload_box_id:
          description: The ID of the corresponding ResearchDataUploadBox
          format: uuid4
          title: Research Data Upload Box Id
          type: string
        storage_alias:
          description: The storage alias to use for this upload box
          title: Storage Alias
          type: string
      required:
      - research_data_upload_box_id
      - storage_alias
      title: Box Creation Request
      type: object
    BoxUpdateRequest:
      description: Request body for updating a FileUploadBox.
      properties:
        locked:
          description: Whether the box should be locked (true) or unlocked (false)
          title: Locked
          type: boolean
      required:
      - locked
      title: Box Update Request
      type: object
    BoxUploadsResponse:
      description: Response body for listing file IDs in a FileUploadBox.
      properties:
        file_ids:
          description: List of file IDs for completed uploads in the box
          items:
            format: uuid4
            type: string
          title: File Ids
          type: array
      required:
      - file_ids
      title: Box Uploads Response
      type: object
    FileUploadCreationRequest:
      description: Request body for creating a new FileUpload.
      properties:
        alias:
          description: The alias for the file within the box (must be unique within
            the box)
          title: Alias
          type: string
        checksum:
          description: The checksum of the file
          title: Checksum
          type: string
        size:
          description: The size of the file in bytes
          minimum: 1.0
          title: Size
          type: integer
      required:
      - alias
      - checksum
      - size
      title: File Upload Creation Request
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HttpBoxAlreadyExistsError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpBoxAlreadyExistsErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: boxAlreadyExists
          title: Exception Id
          type: string
      required:
      - data
      - description
      - exception_id
      title: HttpBoxAlreadyExistsError
      type: object
    HttpBoxAlreadyExistsErrorData:
      properties:
        box_id:
          format: uuid4
          title: Box Id
          type: string
      required:
      - box_id
      title: HttpBoxAlreadyExistsErrorData
      type: object
    HttpBoxNotFoundError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpBoxNotFoundErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: boxNotFound
          title: Exception Id
          type: string
      required:
      - data
      - description
      - exception_id
      title: HttpBoxNotFoundError
      type: object
    HttpBoxNotFoundErrorData:
      properties:
        box_id:
          format: uuid4
          title: Box Id
          type: string
      required:
      - box_id
      title: HttpBoxNotFoundErrorData
      type: object
    HttpLockedBoxError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpLockedBoxErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: lockedBox
          title: Exception Id
          type: string
      required:
      - data
      - description
      - exception_id
      title: HttpLockedBoxError
      type: object
    HttpLockedBoxErrorData:
      properties:
        box_id:
          format: uuid4
          title: Box Id
          type: string
      required:
      - box_id
      title: HttpLockedBoxErrorData
      type: object
    HttpMultipartUploadDupeError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpMultipartUploadDupeErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: multipartUploadDupe
          title: Exception Id
          type: string
      required:
      - data
      - description
      - exception_id
      title: HttpMultipartUploadDupeError
      type: object
    HttpMultipartUploadDupeErrorData:
      properties:
        file_alias:
          title: File Alias
          type: string
      required:
      - file_alias
      title: HttpMultipartUploadDupeErrorData
      type: object
    HttpS3UploadDetailsNotFoundError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpS3UploadDetailsNotFoundErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: s3UploadDetailsNotFound
          title: Exception Id
          type: string
      required:
      - data
      - description
      - exception_id
      title: HttpS3UploadDetailsNotFoundError
      type: object
    HttpS3UploadDetailsNotFoundErrorData:
      properties: {}
      title: HttpS3UploadDetailsNotFoundErrorData
      type: object
    HttpS3UploadNotFoundError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpS3UploadNotFoundErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: s3UploadNotFound
          title: Exception Id
          type: string
      required:
      - data
      - description
      - exception_id
      title: HttpS3UploadNotFoundError
      type: object
    HttpS3UploadNotFoundErrorData:
      additionalProperties: true
      properties: {}
      title: HttpS3UploadNotFoundErrorData
      type: object
    HttpUnknownStorageAliasError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpUnknownStorageAliasErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: noSuchStorage
          title: Exception Id
          type: string
      required:
      - data
      - description
      - exception_id
      title: HttpUnknownStorageAliasError
      type: object
    HttpUnknownStorageAliasErrorData:
      additionalProperties: true
      properties: {}
      title: HttpUnknownStorageAliasErrorData
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    HTTPBearer:
      scheme: bearer
      type: http
info:
  description: A service managing uploads of file objects to an S3-compatible Object
    Storage.
  title: Upload Controller Service
  version: 8.0.0
openapi: 3.1.0
paths:
  /boxes:
    post:
      description: 'Create a new FileUploadBox.


        Requires CreateUploadWorkOrder token and only allowed for Data Stewards via
        the UOS.

        Request body should contain the ID of the corresponding ResearchDataUploadBox.

        Returns the box_id of the newly created FileUploadBox.'
      operationId: createBox
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoxCreationRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                format: uuid4
                title: Response Createbox
                type: string
          description: The box_id of the newly created FileUploadBox
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpUnknownStorageAliasError'
          description: 'Exceptions by ID:

            - noSuchStorage: The storage node for the given alias does not exist.'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBoxAlreadyExistsError'
          description: 'Exceptions by ID:

            - boxAlreadyExists: A FileUploadBox with the given ID already exists.'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Create a new FileUploadBox
      tags:
      - UploadControllerService
  /boxes/{box_id}:
    patch:
      description: 'Update a FileUploadBox to lock or unlock it.


        Request body must indicate whether the box is meant to be locked or unlocked.'
      operationId: updateBox
      parameters:
      - in: path
        name: box_id
        required: true
        schema:
          format: uuid4
          title: Box Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoxUpdateRequest'
        required: true
      responses:
        '204':
          description: FileUploadBox successfully updated
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBoxNotFoundError'
          description: 'Exceptions by ID:

            - boxNotFound: The FileUploadBox with the given ID does not exist.'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Update a FileUploadBox (lock/unlock)
      tags:
      - UploadControllerService
  /boxes/{box_id}/uploads:
    get:
      description: 'Retrieve list of file IDs for a FileUploadBox.


        Returns the list of file IDs for completed uploads in the specified box.'
      operationId: getBoxUploads
      parameters:
      - in: path
        name: box_id
        required: true
        schema:
          format: uuid4
          title: Box Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoxUploadsResponse'
          description: List of file IDs for completed uploads in the box
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBoxNotFoundError'
          description: 'Exceptions by ID:

            - boxNotFound: The FileUploadBox with the given ID does not exist.'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Retrieve list of file IDs for box
      tags:
      - UploadControllerService
    post:
      description: 'Add a new FileUpload to an existing FileUploadBox.


        Creates a new file upload within the specified box with the provided alias,
        checksum, and size.

        Initiates a multipart upload and returns the file ID for the newly created
        upload.'
      operationId: createFileUpload
      parameters:
      - in: path
        name: box_id
        required: true
        schema:
          format: uuid4
          title: Box Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUploadCreationRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                format: uuid4
                title: Response Createfileupload
                type: string
          description: The file_id of the newly created FileUpload
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpUnknownStorageAliasError'
          description: 'Exceptions by ID:

            - noSuchStorage: The storage node for the given alias does not exist.'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpMultipartUploadDupeError'
          description: 'Exceptions by ID:

            - multipartUploadDupe: A multipart upload is already in progress for this
            file.'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Add a new FileUpload to an existing FileUploadBox
      tags:
      - UploadControllerService
  /boxes/{box_id}/uploads/{file_id}:
    delete:
      description: 'Remove a FileUpload from the FileUploadBox.


        Deletes the FileUpload and tells S3 to cancel the multipart upload if applicable.'
      operationId: removeFileUpload
      parameters:
      - in: path
        name: box_id
        required: true
        schema:
          format: uuid4
          title: Box Id
          type: string
      - in: path
        name: file_id
        required: true
        schema:
          format: uuid4
          title: File Id
          type: string
      responses:
        '204':
          description: FileUpload removed successfully
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpS3UploadDetailsNotFoundError'
          description: 'Exceptions by ID:

            - s3UploadDetailsNotFound: S3 upload details for the file could not be
            found.'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        '423':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpLockedBoxError'
          description: 'Exceptions by ID:

            - lockedBox: The FileUploadBox is locked and cannot be modified.'
      security:
      - HTTPBearer: []
      summary: Remove a FileUpload from the FileUploadBox
      tags:
      - UploadControllerService
    patch:
      description: 'Complete file upload by instructing S3 to finalize the multipart
        upload.


        Concludes the file upload process in UCS by instructing S3 to complete the

        multipart upload for the specified file.'
      operationId: completeFileUpload
      parameters:
      - in: path
        name: box_id
        required: true
        schema:
          format: uuid4
          title: Box Id
          type: string
      - in: path
        name: file_id
        required: true
        schema:
          format: uuid4
          title: File Id
          type: string
      responses:
        '204':
          description: File upload completed successfully
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpS3UploadNotFoundError'
          description: 'Exceptions by ID:

            - fileUploadNotFound: The FileUpload could not be found.'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        '423':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpLockedBoxError'
          description: 'Exceptions by ID:

            - lockedBox: The FileUploadBox is locked and cannot be modified.'
      security:
      - HTTPBearer: []
      summary: Complete file upload
      tags:
      - UploadControllerService
  /boxes/{box_id}/uploads/{file_id}/parts/{part_no}:
    get:
      description: 'Get pre-signed S3 upload URL for a specific file part.


        Returns a pre-signed URL that can be used to upload the bytes for the specified

        part number of the specified file upload.'
      operationId: getPartUploadUrl
      parameters:
      - in: path
        name: box_id
        required: true
        schema:
          format: uuid4
          title: Box Id
          type: string
      - in: path
        name: file_id
        required: true
        schema:
          format: uuid4
          title: File Id
          type: string
      - in: path
        name: part_no
        required: true
        schema:
          title: Part No
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Getpartuploadurl
                type: string
          description: The pre-signed URL for uploading the file part
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpUnknownStorageAliasError'
          description: 'Exceptions by ID:

            - noSuchStorage: The storage node for the given alias does not exist.'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Get pre-signed S3 upload URL for file part
      tags:
      - UploadControllerService
  /health:
    get:
      description: Used to test if this service is alive
      operationId: health_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: health
      tags:
      - UploadControllerService
tags:
- name: UploadControllerService
