components:
  schemas:
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HttpEnvelopeDecryptionError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpEnvelopeDecryptionErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: envelopeDecryptionError
          title: Exception Id
      required:
      - data
      - description
      - exception_id
      title: HttpEnvelopeDecryptionError
      type: object
    HttpEnvelopeDecryptionErrorData:
      properties: {}
      title: HttpEnvelopeDecryptionErrorData
      type: object
    HttpMalformedOrMissingEnvelopeError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpMalformedOrMissingEnvelopeErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: malformedOrMissingEnvelopeError
          title: Exception Id
      required:
      - data
      - description
      - exception_id
      title: HttpMalformedOrMissingEnvelopeError
      type: object
    HttpMalformedOrMissingEnvelopeErrorData:
      properties: {}
      title: HttpMalformedOrMissingEnvelopeErrorData
      type: object
    HttpSecretInsertionError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpSecretInsertionErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: secretInsertionError
          title: Exception Id
      required:
      - data
      - description
      - exception_id
      title: HttpSecretInsertionError
      type: object
    HttpSecretInsertionErrorData:
      properties: {}
      title: HttpSecretInsertionErrorData
      type: object
    HttpSecretNotFoundError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpSecretNotFoundErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: secretNotFoundError
          title: Exception Id
      required:
      - data
      - description
      - exception_id
      title: HttpSecretNotFoundError
      type: object
    HttpSecretNotFoundErrorData:
      properties: {}
      title: HttpSecretNotFoundErrorData
      type: object
    HttpVaultConnectionError:
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/HttpVaultConnectionErrorData'
        description:
          description: A human readable message to the client explaining the cause
            of the exception.
          title: Description
          type: string
        exception_id:
          const: vaultConnectionError
          title: Exception Id
      required:
      - data
      - description
      - exception_id
      title: HttpVaultConnectionError
      type: object
    HttpVaultConnectionErrorData:
      properties: {}
      title: HttpVaultConnectionErrorData
      type: object
    InboundEnvelopeContent:
      description: 'Contains file encryption/decryption secret extracted from file
        envelope, the ID

        generated for this secret and the file content offset, i.e. the location of
        the

        encrypted file content within the file.'
      properties:
        new_secret:
          title: New Secret
          type: string
        offset:
          title: Offset
          type: integer
        secret_id:
          title: Secret Id
          type: string
        submitter_secret:
          title: Submitter Secret
          type: string
      required:
      - submitter_secret
      - new_secret
      - secret_id
      - offset
      title: InboundEnvelopeContent
      type: object
    InboundEnvelopeQuery:
      description: Request object containing first file part and a public key.
      properties:
        file_part:
          title: File Part
          type: string
        public_key:
          title: Public Key
          type: string
      required:
      - file_part
      - public_key
      title: InboundEnvelopeQuery
      type: object
    OutboundEnvelopeContent:
      description: 'Contains the header envelope, which contains the file secret encrypted
        with the

        client''s public key and the server''s private key'
      properties:
        content:
          title: Content
          type: string
      required:
      - content
      title: OutboundEnvelopeContent
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  description: A service managing storage and retrieval of symmetric keys in a HashiCorp
    Vault.
  title: Encryption Key Store Service
  version: 1.2.0
openapi: 3.1.0
paths:
  /health:
    get:
      description: Used to test if this service is alive
      operationId: health_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: health
      tags:
      - EncryptionKeyStoreService
  /secrets:
    post:
      description: 'Extract file encryption/decryption secret, create secret ID and
        extract

        file content offset'
      operationId: postEncryptionData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboundEnvelopeQuery'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboundEnvelopeContent'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpMalformedOrMissingEnvelopeError'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpEnvelopeDecryptionError'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        '502':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpSecretInsertionError'
          description: Bad Gateway
        '504':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpVaultConnectionError'
          description: Gateway Timeout
      summary: Extract file encryption/decryption secret and file content offset from
        enevelope
      tags:
      - EncryptionKeyStoreService
  /secrets/{secret_id}:
    delete:
      description: Create header envelope for the file secret with given ID encrypted
        with a given public key
      operationId: deleteSecret
      parameters:
      - in: path
        name: secret_id
        required: true
        schema:
          title: Secret Id
          type: string
      responses:
        '204':
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpSecretNotFoundError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete the associated secret
      tags:
      - EncryptionKeyStoreService
  /secrets/{secret_id}/envelopes/{client_pk}:
    get:
      description: Create header envelope for the file secret with given ID encrypted
        with a given public key
      operationId: getEncryptionData
      parameters:
      - in: path
        name: secret_id
        required: true
        schema:
          title: Secret Id
          type: string
      - in: path
        name: client_pk
        required: true
        schema:
          title: Client Pk
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundEnvelopeContent'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpSecretNotFoundError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get personalized envelope containing Crypt4GH file encryption/decryption
        key
      tags:
      - EncryptionKeyStoreService
servers:
- url: ''
tags:
- name: EncryptionKeyStoreService
