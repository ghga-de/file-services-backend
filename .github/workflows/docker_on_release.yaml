# Copyright 2022-2023 Universität Tübingen, DKFZ and EMBL
# for the German Human Genome-Phenome Archive (GHGA)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Push to docker on new release"

on:
  release:
      types: [published]

env:
  DOCKERHUB_NAMESPACE: ghga
  DOCKERHUB_PLATFORMS: "linux/amd64,linux/arm64"
  TRIVY_SEVERITY: "CRITICAL,HIGH"
  IFRS_CONFIG_YAML: ./services/ifrs/dev_config.yaml
  IRS_CONFIG_YAML: ./services/irs/dev_config.yaml
  PCS_CONFIG_YAML: ./services/pcs/dev_config.yaml
  UCS_CONFIG_YAML: ./services/ucs/dev_config.yaml
  DCS_CONFIG_YAML: ./services/dcs/dev_config.yaml
  EKSS_CONFIG_YAML: ./services/ekss/dev_config.yaml
  FIS_CONFIG_YAML: ./services/fis/dev_config.yaml
  FINS_CONFIG_YAML: ./services/fins/dev_config.yaml

jobs:
  get-tag:
    runs-on: ubuntu-latest
    outputs:
      commit: ${{ steps.get-release-tag.outputs.commit }}
      base_sha: ${{ steps.setup-variables.outputs.base_sha }}
      fetch_depth_compare: ${{ steps.setup-variables.outputs.fetch_depth_compare }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Get commit hash for previous release tag from git history
      # As we are running this on publish, a new tag for the current release is already
      # created
      - name: Get latest tag preceding this release
        id: get-release-tag
        run: |
          # get the two latest tags
          tags=$(git tag | sort --sort=version | tail -n 2)
          # check if there are actually two
          if [ $(echo "$tags" | wc -l) -eq 2 ]
          then
            # get commit hash for tag and write to output
            tag=$(echo "$tags" | head -n1)
            commit=$(git rev-parse "$tag"^{commit})
            echo "commit=$commit" >> $GITHUB_OUTPUT
          fi

      # If there is no previous tag, some variables need to be set up
      # base_sha is the first commit to the repo - awk is used to just print the
      # first column of the output which is the short form hash)
      # fetch_depth is set up as number of all commits on the branch
      - name: Set up needed variables
        id: setup-variables
        if: ${{ steps.get-release-tag.outputs.commit == '' }}
        run: |
          echo "base_sha=$(git log --oneline | tail -n1 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "fetch_depth_compare=$(git log --oneline | wc -l)" >> $GITHUB_OUTPUT

  #
  # Run this if we have a commit hash for a tag
  # We assume there is not a large range of commits and we can go with the default
  # fetch depth here
  check-changes-with-release-tag:
    needs: get-tag
    if: ${{ needs.get-tag.outputs.commit != '' }}
    uses: ./.github/workflows/get_affected_services.yaml
    with:
      base_sha: ${{ needs.get-tag.outputs.commit }}

  # Run this, if there's no tag yet.
  # Needs custom fetch depth for comparison to fit large history
  # Checkout depth of 0 means fetch everything
  check-changes-without-release-tag:
    needs: get-tag
    if: ${{ needs.get-tag.outputs.commit == '' }}
    uses: ./.github/workflows/get_affected_services.yaml
    with:
      base_sha: ${{ needs.get-tag.outputs.base_sha }}
      fetch_depth_checkout: 0
      fetch_depth_compare: ${{ needs.get-tag.outputs.fetch_depth_compare }}


  changed-services:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [check-changes-with-release-tag, check-changes-without-release-tag]
    outputs:
      services: ${{ steps.prepare-output.outputs.services }}

    # Bundle output into one variable depending on chosen branch
    steps:
      - name: Prepare output
        id: prepare-output
        run: |
          if ${{ needs.check-changes-with-release-tag.outputs.services != '' }}
          then
            echo "services=${{ toJSON(needs.check-changes-with-release-tag.outputs.services) }}" >> $GITHUB_OUTPUT
          else
            echo "services=${{ toJSON(needs.check-changes-without-release-tag.outputs.services) }}" >> $GITHUB_OUTPUT
          fi

  push-to-docker:
    runs-on: ubuntu-latest
    needs: changed-services
    # Job failure propagates downwards through the job graph
    # As one of the check-changes-* jobs has to fail, the failure state needs to be
    # explicitly ignored adding the always condition to the existing check
    if: ${{ needs.changed-services.outputs.services != '' && needs.changed-services.outputs.services != '[]' && always() }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.changed-services.outputs.services) }}
        flavor: ["", "debian"]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install stringcase and typer
        id: setup-stringcase
        run: pip install stringcase typer

      - name: Extract service name for ${{ matrix.service }}
        id: extract-service-name
        shell: bash
        run: |
          echo name=$(python3 scripts/service_name.py ${{ matrix.service }}) >> $GITHUB_OUTPUT

      - name: Extract service version for ${{ matrix.service }}
        id: extract-service-version
        shell: bash
        run: |
          echo version=$(python3.12 -c "import tomllib; print(tomllib.load(open('services/${{ matrix.service }}/pyproject.toml', 'rb'))['project']['version'])") >> $GITHUB_OUTPUT

      - name: Create current docker tag
        id: docker-tag
        run: |
          echo tag="${{ env.DOCKERHUB_NAMESPACE }}/${{ steps.extract-service-name.outputs.name }}:${{ steps.extract-service-version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Check if docker image already exists
        id: check-image-exists
        run: |
          # pipefail set by default, join with "or" to not cancel run on missing image
          docker pull "docker.io/${{ steps.docker-tag.outputs.tag }}" ||
          if [ $? -eq 0 ]
          then
            # if the image exists, fail this step and consequently all subsequent steps
            exit 1
          fi

      - name: Symlink requirement files
        id: symlink-requirements
        run: cp -r lock services/${{ matrix.service }}/lock

      - name: Prepare Dockerfiles
        id: prepare-dockerfiles
        run: cp Dockerfile* services/${{ matrix.service }}/ && sed -i "s/\(ENTRYPOINT \)\[\]/\1[\"${{ matrix.service }}\"]/" services/${{ matrix.service }}/Dockerfile*

      - name: Docker build and push
        uses: ghga-de/gh-action-ci@v1
        with:
          checkout: "false"
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          dockerhub_repository: ${{ steps.extract-service-name.outputs.name }}
          tag: "${{ steps.docker-tag.outputs.tag }}"
          trivy_severity: "CRITICAL"
          flavor: "${{ matrix.flavor }}"
          working_directory: "services/${{ matrix.service }}"
